"""Module containing tests for the compare_dates.py"""
import xml.etree.ElementTree

import pytest

# Local App imports
from resources.compare_dates import DatabaseDate
from resources.utils import read_file


@pytest.fixture
def get_single_threats() -> xml.etree.ElementTree.Element:
    """
    Get the XML element tree for single threat events in test_resources
    :return: Instantiated XML Element
    """
    xml_element = read_file('tests/test_resources/MBBR-STDOUT_all_single_events.XML')
    return xml_element


@pytest.fixture
def get_no_threats() -> xml.etree.ElementTree.Element:
    """
    Get the XML element tree for no threat events in test_resources
    :return: Instantiated XML Element
    """
    xml_element = read_file('tests/test_resources/MBBR-STDOUT_no_events.XML')
    return xml_element


@pytest.fixture
def get_multi_threats() -> xml.etree.ElementTree.Element:
    """
    Get the XML element tree for multi threat events in test_resources
    :return: Instantiated XML Element
    """
    xml_element = read_file('tests/test_resources/MBBR-STDOUT_mixed_results.XML')
    return xml_element


def test_database_dates(get_no_threats, get_multi_threats, get_single_threats):
    """
    This test function takes in pytest fixtures containing XML element trees,
    and uses the fixtures to test that the results from the class are correct.

    :param get_no_threats: XML element tree containing data with no threats
    :param get_multi_threats: XML element tree containing data with no multi threats
    :param get_single_threats: XML element tree containing data with single threats
    :return: None
    """

    # Test that the no threats XML file returns a dict containing a str and int
    no_threat_dates = DatabaseDate(get_no_threats)
    assert no_threat_dates.database_dates == {'malware-database': 252, 'rootkit-database': 252}

    # Test that the single threats XML file returns a dict containing a str and int
    single_threat_dates = DatabaseDate(get_single_threats)
    assert single_threat_dates.database_dates == {'malware-database': 2815, 'rootkit-database': 2815}

    # Test that the multi threats XML file returns a dict containing a str and int
    multi_threat_dates = DatabaseDate(get_multi_threats)
    assert multi_threat_dates.database_dates == {'malware-database': 2815, 'rootkit-database': 2815}
