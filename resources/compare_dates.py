import xml.etree.ElementTree
from dataclasses import dataclass
from datetime import date, datetime
from typing import Dict


@dataclass
class DatabaseDate:
    """
    Data-oriented class that takes in an XML element and parses the data into dictionaries.
    These dictionaries with contain the data for 'malware-database' and 'rootkit-database' update times.
    :param xml_content: (required) An instantiated XML element used to parse out the necessary info
    """

    xml_content: xml.etree.ElementTree.Element
    date_today: datetime = datetime.strptime(str(date.today()), "%Y-%m-%d")  # get today's date and convert to epoch

    @property
    def _extract_last_db_update_time(self) -> Dict[str, str]:
        """Parse the XML content <engine> element for 'malware' and 'rootkit' data"""
        return {child.tag: child.text for child in self.xml_content[1] if 'database' in child.tag}

    @property
    def _convert_last_db_update_time(self) -> Dict[str, datetime]:
        """Take the string date value from XML date content (v2015.01.07.14) and convert to (2015-01-07)"""
        return {key: datetime.strptime(val.replace(".", "-", 2).replace("v", "")[:-3], "%Y-%m-%d") for key, val in
                self._extract_last_db_update_time.items()}

    @property
    def database_dates(self) -> Dict[str, int]:
        """Compare today's epoch time to databases epoch times and return in an int of days"""
        return {key: (self.date_today - val).days for key, val in self._convert_last_db_update_time.items()}
