"""Module containing class used to parse and display XML content"""

# Standard Library imports
from typing import Dict

# Third-party imports
import xml.etree.ElementTree

# Local App imports
from resources.utils import error_handler, create_logger

logger = create_logger()


class CheckForThreats:
    # TODO: NEED TO MOVE THIS CONTENT TO CONFIG.JSON
    keyTup = ('processes', 'modules', 'folders', 'sectors', 'keys', 'datas', 'files',
              'values')  # tuple used to denote the types of items in xmlcontent[3] position

    def __init__(self, xml_element: xml.etree.ElementTree.Element) -> None:
        """
        Class that takes in an XML element and parses the content and print to the stdout.
        :param xml_element: (required) An instantiated ElementTree.Element that contains the XML data loaded
        :return: None
        """
        self.xml_element = xml_element

    @error_handler
    @property
    def number_of_threats(self) -> Dict[str, int]:
        """
        Property method to obtain the k/v pairs of summary types and their associated text.
        (e.g., {'values': 1, 'files': 2})

        :return: A Dict that contains the summary item as a string and the number of findings for that item as an integer
        """
        out_dict = {child.tag: int(child.text) for child in self.xml_element[3] if child.tag in CheckForThreats.keyTup}
        return out_dict

    @error_handler
    def print_threats_if_found(self) -> bool:
        """
        This method will parse the XML elements and print the findings onto the stdout screen.
        It will return a boolean result based on whether findings exist, or they do not.
        :return: Boolean (True=Findings exist / False=Findings don't exist)
        """
        if [child.tag for child in self.xml_element[5]]:
            # print("\n[!] THREATS DETECTED -- please review the below items...")
            logger.info("[!] THREATS DETECTED -- please review the below items...")
            startPos = 0  # start position var for range
            for key, val in self.number_of_threats.items():
                if val > 0:
                    print(f'\n[*] {key.upper()} ({val}):')
                    endPos = val + startPos  # to find the correct 0-based position of the child items, this var was created for the endPos in range
                    for x in range(startPos, endPos):  # iterate over range
                        startPos = endPos  # update the startPos with the last endPos
                        for child in self.xml_element[5][x]:  # print data in the xmlcontent[5] position
                            print(f'    {child.text}')
            return True
        else:  # no threats were found
            # print(f'\n[+] All items scanned successfully, no threats detected...')
            logger.info("[+] All items scanned successfully, no threats detected...")
            return False
