"""Module containing main script for execution"""

# Local App imports
from resources.compare_dates import DatabaseDate
from resources.check_for_threats import Threats
from resources.errors import NoXmlInPathError
from resources.user_prompts import get_file_path
from resources.utils import (
    error_handler,
    create_logger,
    read_file
)

logger = create_logger()


@error_handler
def main(file_path: str) -> bool:
    """
    Main function that takes in a file path string (e.g., C:\file.XML) and passes the parsed XML root
    element to classes for parsing and printing.

    :param file_path: String containing a file path (e.g., C:\file.XML)
    :return: Boolean result if function completes successfully (True=completed)
    """
    # print the dates for the databases
    db_dates = DatabaseDate(read_file(file_path))
    print("\n---------------------------------------------------------------------------------")
    print("---------------------------------------------------------------------------------")
    for database, num_of_days in db_dates.database_dates.items():
        print(
            f"[-] {database} is {num_of_days} days old, considering updating...") if num_of_days > 0 else print(
            f"[+] The {database} is up to date...")

    # check to see if threats are present in output
    checkThreats = Threats(read_file(file_path))
    checkThreats.print_threats_if_found()
    return True


if __name__ == '__main__':
    try:
        user_input = get_file_path()
        main(user_input) if user_input else None  # ternary to decide if main func should be called
    except NoXmlInPathError:
        logger.error("The path provided did not include .XML as an extension, please check the path")
    except FileNotFoundError:
        logger.error(
            "FileNotFoundError: The passed file cannot be found, please check your path and remove quotes (\")")
