"""Module containing Utility Functions"""

# Standard Library imports
import logging
import sys
import os
from typing import Any

# Third-party imports
from defusedxml.ElementTree import parse

# Local App imports
from resources.errors import BadPromptResponseError

#####################################
# Get Environment Variables & Configs
#####################################

# Config File Vars
with open("config.json", 'r') as f:
    data = json.load(f)

file_exts = data['file_types']


#####################################
# Create logger func
#####################################
def create_logger() -> logging:
    """
    Create a logger
    :return: logger
    """
    logging.basicConfig(level=logging.INFO, format='%(asctime)s: %(levelname)s: %(message)s')
    log = logging.getLogger()
    return log


logger = create_logger()  # create logger func


###########################
# Custom Error Handler func
###########################

def error_handler(func):
    # exception handling decorator function

    def inner_func(*args, **kwargs):
        try:
            result = func(*args, **kwargs)
            return result
        except BadPromptResponseError:
            logger.error("BadPromptResponseError: Unknown input, needs to be either [y/n]")
        except KeyboardInterrupt:
            logger.info("[!] CTRL+C pressed, exiting program")
            sys.exit(0)
        except FileNotFoundError as err:
            logger.error("FileNotFoundError: error=%s func=%s", err, func.__name__)
            sys.exit(1)
        except EOFError as err:
            logger.error("EOFError: error=%s func=%s", err, func.__name__)
        except KeyError as err:
            logger.error("KeyError: error=%s func=%s", err, func.__name__)
        except TypeError as err:
            logger.error("TypeError: error=%s func=%s", err, func.__name__)
        except ValueError as err:
            logger.error("ValueError: error=%s func=%s", err, func.__name__)
        except Exception as err:
            logger.error("GeneralException: error=%s func=%s", err, func.__name__)

    return inner_func


###############################################
# Retrieve the root of the parsed XML file path
###############################################
def read_file(file_path: str) -> Any:
    tree = parse(file_path)
    root = tree.getroot()
    print(type(root))
    return root


###########################
# Check is file path exists
###########################
def check_if_path_exists(path: str) -> bool:
    """
    Utility function that will take in a path string and check if it exists
    :param path: (required) String param that contains a path on the OS to check
    :return: Bool result (True=Path exists / False=Path doesn't exist)
    """
    does_exist = os.path.exists(str(path))
    return does_exist
